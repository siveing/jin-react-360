import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import typescript from '@rollup/plugin-typescript';
import dts from 'rollup-plugin-dts';
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import postcss from 'rollup-plugin-postcss';
import pkg from './package.json.js';  // Use .js extension for import (or require() if CJS)

export default [
  // JS Bundles (ESM + CJS)
  {
    input: 'src/index.ts',  // Your entry file (re-exports components)
    external: [
      'react',
      'react-dom',
      'react-hammerjs',  // Your dep; add others as needed
      /^@babel\/runtime/  // If using Babel runtime helpers (optional)
    ],
    output: [
      {
        file: pkg.main,  // "./dist/index.cjs.js"
        format: 'cjs',
        sourcemap: true,
        exports: 'named'  // For default exports in CJS
      },
      {
        file: pkg.module,  // "./dist/index.esm.js"
        format: 'esm',
        sourcemap: true
      }
    ],
    plugins: [
      peerDepsExternal(),  // Externalize peers (React, etc.)
      postcss({
        extensions: ['.css']
      }),
      resolve(),  // Resolve node_modules
      commonjs(),  // Convert CJS to ESM
      typescript({
        tsconfig: './tsconfig.json',
        declaration: false,  // Don't generate .d.ts here (handled separately)
        sourceMap: true,
        jsx: 'react-jsx'  // Match tsconfig
      })
    ]
  },
  // Type Declarations Bundle
  {
    input: 'dist/types/index.d.ts',  // Generated by tsc
    output: [{ file: pkg.types, format: 'esm' }],  // "./dist/index.d.ts"
    plugins: [dts()]
  }
];